#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ AI HR Agent
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""
import asyncio
import sys
import os
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from main import AIHRAgent
from models.interview import AudioSegment
from utils.logger import setup_logger, get_logger

logger = get_logger(__name__)


async def test_complete_pipeline():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ AI HR Agent ===")
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = AIHRAgent()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        await agent.start()
        logger.info("‚úÖ –ê–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫
        logger.info("üì° –°–∏–º—É–ª—è—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞...")
        
        for i in range(5):
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
            sample_rate = 16000
            duration = 0.5  # 0.5 —Å–µ–∫—É–Ω–¥—ã
            frequency = 440 + i * 100  # –†–∞–∑–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã
            
            t = np.linspace(0, duration, int(sample_rate * duration), False)
            audio_data = np.sin(2 * np.pi * frequency * t).astype(np.float32)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
            audio_bytes = audio_data.tobytes()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–≥–µ–Ω—Ç–∞
            await agent.process_audio_stream(audio_bytes, timestamp=i * 0.5)
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            await asyncio.sleep(0.1)
        
        # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await asyncio.sleep(2)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º endpointing
        logger.info("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpointing...")
        endpointing_status = agent.get_endpointing_status()
        logger.info(f"–°—Ç–∞—Ç—É—Å endpointing: {endpointing_status}")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ—á—å
        endpoint_result = await agent.force_speech_endpoint()
        if endpoint_result:
            logger.info(f"‚úÖ –†–µ—á—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {endpoint_result['duration']:.2f}s")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
        logger.info("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞...")
        
        test_responses = [
            "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –û–∫—Å–∞–Ω–∞, —è –±—É–¥—É –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é.",
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã —Å Python.",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç, —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å."
        ]
        
        for i, response in enumerate(test_responses):
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ {i+1}: {response[:30]}...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏
            emotions = ["neutral", "happy", "neutral"]
            emotion = emotions[i] if i < len(emotions) else "neutral"
            
            audio_response = await agent.generate_bot_response(response, emotion)
            
            if audio_response:
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç {i+1} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {audio_response.duration:.2f}s")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ {i+1}")
            
            await asyncio.sleep(0.5)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ publisher
        publisher_stats = agent.get_publisher_statistics()
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ publisher: {publisher_stats}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ LLM
        llm_stats = agent.get_llm_statistics()
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ LLM: {llm_stats}")
        
        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ STT
        stt_capabilities = agent.get_stt_capabilities()
        logger.info(f"–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ STT: {stt_capabilities}")
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        status = await agent.get_status()
        logger.info(f"–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞: {status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        logger.info("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é LLM –¥–∞–Ω–Ω—ã—Ö
        llm_dir = "llm_data"
        if os.path.exists(llm_dir):
            llm_files = os.listdir(llm_dir)
            logger.info(f"–§–∞–π–ª—ã LLM –¥–∞–Ω–Ω—ã—Ö: {len(llm_files)}")
            for file in llm_files[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
                logger.info(f"  - {file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é output (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        output_dir = "output"
        if os.path.exists(output_dir):
            output_files = os.listdir(output_dir)
            logger.info(f"–§–∞–π–ª—ã output: {len(output_files)}")
            for file in output_files[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
                logger.info(f"  - {file}")
        
        logger.info("üéâ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        await agent.stop()
        logger.info("üõë –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def test_individual_services():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ ===")
    
    agent = AIHRAgent()
    
    try:
        await agent.start()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º VAD
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VAD...")
        vad_healthy = await agent.vad_service.health_check()
        logger.info(f"VAD –∑–¥–æ—Ä–æ–≤: {vad_healthy}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º STT
        logger.info("üé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ STT...")
        stt_healthy = await agent.stt_service.health_check()
        logger.info(f"STT –∑–¥–æ—Ä–æ–≤: {stt_healthy}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º TTS
        logger.info("üîä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TTS...")
        tts_healthy = await agent.tts_service.health_check()
        logger.info(f"TTS –∑–¥–æ—Ä–æ–≤: {tts_healthy}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Publisher
        logger.info("üì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Publisher...")
        publisher_healthy = await agent.publisher_service.health_check()
        logger.info(f"Publisher –∑–¥–æ—Ä–æ–≤: {publisher_healthy}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º LLM Integration
        logger.info("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM Integration...")
        llm_healthy = await agent.llm_integration_service.health_check()
        logger.info(f"LLM Integration –∑–¥–æ—Ä–æ–≤: {llm_healthy}")
        
        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        
    finally:
        await agent.stop()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logger(level="INFO")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        await test_individual_services()
        
        print("\n" + "="*60 + "\n")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
        await test_complete_pipeline()
        
        logger.info("üéØ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())
